pipeline {
    agent any
    tools{
        nodejs 'nodejs'
    }
    environment {
        SCANNER_HOME = tool 'Sonar-scanner'
        IMAGE_NAME = 'leoworths/brokencrystals'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', credentialsId: 'git-cred', url: 'https://github.com/leoworths/brokencrystals.git'
            }
        }
        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }
        stage('Test Cases') {
            steps {
                sh 'npm test -DskipTests =true'
            }
        }
        stage('Trivy File Scan') {
            steps {
                sh 'trivy fs . > scan-report.txt'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh """$SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=BrokenCrystals \
                        -Dsonar.projectKey=BrokenCrystals"""
            }
            }
        }
        stage('SonarQube Quality Gate') {
            steps {
                waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
            }
        }
        stage('Owasp Dependencies Check') {
            steps {
                dependencyCheck additionalArguments: '', odcInstallation: 'owasp'
                dependencyCheckPublisher pattern: 'dependency-check-report.xml'
            }
        }
        stage('Docker Build Image') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'docker-login') {
                        sh "docker build -t ${IMAGE_NAME}:latest ."
                }
                
            }
            }
        }
        stage('Docker Image Scan') {
            steps {
                sh "trivy image . > scan-report.txt ${IMAGE_NAME}:latest"
            }
        }
        stage('Docker Push Image') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'docker-login') {
                        sh "docker push -t ${IMAGE_NAME}:latest"
                }
                }
            }
        }
            stage('Docker Publish Image') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'docker-login') {
                        sh "docker run -d -p 3000:3000 ${IMAGE_NAME}:latest"
                }
                }
            }
        }
        tage('Deploy to K8s') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: 'crystal-cluster', contextName: '', credentialsId: 'k8s-cred', namespace: 'crystals', serverUrl: '') {
                    sh "kubectl apply -f deployment.yaml -n crystals"
                    sh "kubectl get svc -n crystals"
                }
            }
        }
    }
}
